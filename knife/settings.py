"""
Django settings for knife project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from django.contrib.messages import constants as messages
from dotenv import load_dotenv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get('DEBUG')))

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(' ')


# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',  # For template json

    'core.apps.CoreConfig',
    'core.apps.MyAdminConfig',
    'user.apps.UserConfig',
    'product.apps.ProductConfig',
    'payment.apps.PaymentConfig',

    'django_filters',
    'cities_light',
    'captcha',
    'fontawesomefree',
    'guardian',

    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    'storages',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.FirstTimeVisitMiddleware',
    'core.middleware.SessionExpirationMiddleware'

]

ROOT_URLCONF = 'knife.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'product.context_processors.amount_items_cart',
                'product.context_processors.categories_list',
                'user.context_processors.get_login_form',
                'core.context_processors.breadcrumb_path'
            ],
        },
    },
]

WSGI_APPLICATION = 'knife.wsgi.application'

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-secondary',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE'),
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'POST': os.getenv('DB_POST')
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'user.authbackends.MyUserBackend',

    'allauth.account.auth_backends.AuthenticationBackend',
    'guardian.backends.ObjectPermissionBackend'
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'America/Argentina/Buenos_Aires'

USE_I18N = True

USE_TZ = True

SESSION_COOKIE_AGE = 3600
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
# CustomUser model
AUTH_USER_MODEL = 'user.MyUser'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media/'


# Cities light config
CITIES_LIGHT_TRANSLATION_LANGUAGES = ['es', 'en', 'pt', 'fr', 'it', 'de', 'nl']
CITIES_LIGHT_INCLUDE_COUNTRIES = [
    'AR', 'UY', 'BR', 'CL', 'PE', 'BO',
    'PY', 'VE', 'CO', 'EC', 'MX', 'PA',
    'SV', 'CR', 'PR', '	US', 'AD', 'BE',
    'CA', 'DE', 'DO', 'ES', 'FR', 'GB',
    'HN', 'IT', 'MC', 'MX', 'NL']


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


RECAPTCHA_PUBLIC_KEY = os.getenv('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = os.getenv('RECAPTCHA_PRIVATE_KEY')

# Conf Email
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_USE_TLS = bool(int(os.environ.get('EMAIL_USE_TLS')))
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
PASSWORD_RESET_TIMEOUT = int(os.getenv('PASSWORD_RESET_TIMEOUT'))

# Allauth config
SITE_ID = 1
LOGIN_URL = 'account_login'

ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True
LOGIN_REDIRECT_URL = 'home'  # 'login_success'

ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3

ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = 'account_login'


ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = 'home'
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_LOGOUT_REDIRECT_URL = 'home'  # 'logout_success'
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False
ACCOUNT_PRESERVE_USERNAME_CASING = False
ACCOUNT_SIGNUP_REDIRECT_URL = 'password_set'

ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'
ACCOUNT_USERNAME_REQUIRED = True

SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "optional"
SOCIALACCOUNT_EMAIL_REQUIRED = True


SOCIALACCOUNT_ADAPTER = 'user.adapters.SocialAccountAdapter'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    },
}

ACCOUNT_FORMS = {
    'add_email': 'allauth.account.forms.AddEmailForm',
    'change_password': 'user.forms.MyUserAllauthChangePassword',
    'disconnect': 'allauth.socialaccount.forms.DisconnectForm',
    'login': 'user.forms.MyUserAllauthLoginForm',
    'reset_password': 'user.forms.MyUserAllauthResetPasswordForm',
    'reset_password_from_key': 'user.forms.MyUserAllauthResetPasswordKeyForm',
    'set_password': 'user.forms.MyUserAllauthSetPassword',
    'signup': 'users.forms.MyUserAllauthSignUpForm',
    'user_token': 'allauth.account.forms.UserTokenForm',
}


# Jazzmin Conf
X_FRAME_OPTIONS = 'SAMEORIGIN'
JAZZMIN_SETTINGS = {
    "site_title": "Panel de Staff",
    "site_header": "Knives Ecommerce",
    "site_brand": "Knives Ecommerce",
    "site_logo": "assets/images/logo-icon/knife-icon-bg.png",
    "site_logo_classes": "admin-logo",
    "site_icon": "assets/images/logo-icon/knife-icon.png",
    "copyright": "Knives Ecommerce",
    "user_avatar": "profile_img",
    "related_modal_active": True,
    # "language_chooser": True, #Need more logic see later
    # "show_ui_builder": True,
    ############
    # Top Menu #
    ############
    "topmenu_links": [
        {"name": "Home",  "url": "admin:index",
            "permissions": ["auth.view_user"]},
        {"name": "Volver sitio principal", "url": "https://knives-ecommerce-simulation.vercel.app/",
            "new_window": True},
        {"model": "product.Product"},
    ],
    #############
    # Side Menu #
    #############
    "order_with_respect_to": [
        "product", "product.Category", "product.Handle", "product.Product",
        "product.Prod_SecImg", "product.Message", "payment"
    ],
    "icons": {
        "product.Category": "fas fa-bars",
        "product.Handle": "fas fa-hands",
        "product.Product": "fas fa-utensils",
        "product.Prod_SecImg": "fas fa-image",
        "product.Message": "fas fa-comments",
        "payment.DiscountCode": "fas fa-tags",
        "payment.ProductBuyed": "fas fa-star",
        "payment.Address": "fas fa-compass",
        "payment.Card": "fas fa-credit-card",
        "payment.CardUser": "fas fa-id-card",
        "payment.Order": "fas fa-book",
    },
    "default_icon_parents": "fas fa-circle-question",
    "default_icon_children": "fas fa-question",
    #################
    # Related Modal #
    #################

    "related_modal_active": True,
    "custom_css": "scss/style-admin.css",
}

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": "navbar-danger",
    "accent": "accent-orange",
    "navbar": "navbar-danger navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": False,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": False,
    "sidebar": "sidebar-dark-danger",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": True,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": True,
    "theme": "default",
    "dark_mode_theme": None,
    "button_classes": {
        "primary": "btn-outline-primary",
        "secondary": "btn-outline-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    },
    "actions_sticky_top": False
}


AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID') 
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY') 
				
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME') 
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
AWS_S3_FILE_OVERWRITE = bool(int(os.environ.get('AWS_S3_FILE_OVERWRITE')))

STATIC_URL = f'{AWS_S3_CUSTOM_DOMAIN}/static/'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
MEDIA_ROOT = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'

STORAGES = {
    #Media files management
    "default": {
        "BACKEND": "knife.storage_backends.MediaStorage"
    },
    # Staticfiles
    "staticfiles":{
        "BACKEND": "knife.storage_backends.StaticStorage"
    },
}